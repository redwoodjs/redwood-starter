import type { MultipartResponse, ProcessRequestResult, Push, Response as HelixResponse } from "../types";
export declare function getRegularResponse<TResponse extends Response>(responseResult: HelixResponse<any, any>, Response: {
    new (body: BodyInit, responseInit: ResponseInit): TResponse;
}, transformResult?: import("./utils").TransformResultFn): TResponse;
export declare function getMultipartResponse<TResponse extends Response, TReadableStream extends ReadableStream>(multipartResult: MultipartResponse<any, any>, Response: {
    new (readableStream: TReadableStream, responseInit: ResponseInit): TResponse;
}, ReadableStream: {
    new (underlyingSource: UnderlyingSource): TReadableStream;
}, transformResult?: import("./utils").TransformResultFn): TResponse;
export declare function getPushResponse<TResponse extends Response, TReadableStream extends ReadableStream>(pushResult: Push<any, any>, Response: {
    new (readableStream: TReadableStream, responseInit: ResponseInit): TResponse;
}, ReadableStream: {
    new (underlyingSource: UnderlyingSource): TReadableStream;
}, transformResult?: import("./utils").TransformResultFn): TResponse;
export declare function getResponse<TResponse extends Response, TReadableStream extends ReadableStream>(result: ProcessRequestResult<any, any>, Response: {
    new (body: BodyInit, responseInit: ResponseInit): TResponse;
}, ReadableStream: {
    new (underlyingSource: UnderlyingSource): TReadableStream;
}, transformResult?: import("./utils").TransformResultFn): TResponse;
